{"version":3,"file":"708.5e23c3290ddfb9df.js","mappings":"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","names":["FuseAlertService","constructor","this","ReplaySubject","onDismiss","_onDismiss","asObservable","onShow","_onShow","dismiss","name","next","show","factory","i0","FuseAlertComponent","_changeDetectorRef","_fuseAlertService","_fuseUtilsService","randomId","EventEmitter","Subject","classList","appearance","dismissed","dismissible","showIcon","type","ngOnChanges","changes","coerceBooleanProperty","currentValue","_toggleDismiss","ngOnInit","pipe","filter","takeUntil","_unsubscribeAll","subscribe","ngOnDestroy","complete","dismissedChanged","markForCheck","selectors","fuseAnimations","changeDetection","FuseAlertModule","CommonModule","MatButtonModule","MatIconModule","FuseCardModule","_MatProgressSpinnerBase","mixinColor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","MatProgressSpinner","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","super","_diameter","_value","_resizeSubscription","Subscription","mode","trackedDiameters","_diameters","_spinnerAnimationLabel","_getSpinnerAnimationLabel","has","head","set","Set","_noopAnimations","_forceAnimations","nativeElement","nodeName","toLowerCase","color","defaultColor","strokeWidth","isBrowser","SAFARI","change","run","size","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","element","_getShadowRoot","add","unsubscribe","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","_getCircleTransformOrigin","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","WeakMap","ɵfac","i1","DOCUMENT","ANIMATION_MODULE_TYPE","i2","ɵcmp","decls","i3","styles","MatProgressSpinnerModule","ɵmod","ɵinj","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./src/@fuse/components/alert/alert.service.ts","./src/@fuse/components/alert/alert.component.html","./src/@fuse/components/alert/alert.component.ts","./src/@fuse/components/alert/alert.module.ts","./src/@fuse/components/card/card.module.ts","./node_modules/@angular/material/fesm2020/progress-spinner.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FuseAlertService\n{\n    private readonly _onDismiss: ReplaySubject<string> = new ReplaySubject<string>(1);\n    private readonly _onShow: ReplaySubject<string> = new ReplaySubject<string>(1);\n\n    /**\n     * Constructor\n     */\n    constructor()\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Getter for onDismiss\n     */\n    get onDismiss(): Observable<any>\n    {\n        return this._onDismiss.asObservable();\n    }\n\n    /**\n     * Getter for onShow\n     */\n    get onShow(): Observable<any>\n    {\n        return this._onShow.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Dismiss the alert\n     *\n     * @param name\n     */\n    dismiss(name: string): void\n    {\n        // Return if the name is not provided\n        if ( !name )\n        {\n            return;\n        }\n\n        // Execute the observable\n        this._onDismiss.next(name);\n    }\n\n    /**\n     * Show the dismissed alert\n     *\n     * @param name\n     */\n    show(name: string): void\n    {\n        // Return if the name is not provided\n        if ( !name )\n        {\n            return;\n        }\n\n        // Execute the observable\n        this._onShow.next(name);\n    }\n\n}\n","<div\n    class=\"fuse-alert-container\"\n    *ngIf=\"!dismissible || dismissible && !dismissed\"\n    [@fadeIn]=\"!dismissed\"\n    [@fadeOut]=\"!dismissed\">\n\n    <!-- Border -->\n    <div\n        class=\"fuse-alert-border\"\n        *ngIf=\"appearance === 'border'\"></div>\n\n    <!-- Icon -->\n    <div\n        class=\"fuse-alert-icon\"\n        *ngIf=\"showIcon\">\n\n        <!-- Custom icon -->\n        <div class=\"fuse-alert-custom-icon\">\n            <ng-content select=\"[fuseAlertIcon]\"></ng-content>\n        </div>\n\n        <!-- Default icons -->\n        <div class=\"fuse-alert-default-icon\">\n\n            <mat-icon\n                *ngIf=\"type === 'primary'\"\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'accent'\"\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'warn'\"\n                [svgIcon]=\"'heroicons_solid:x-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'basic'\"\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'info'\"\n                [svgIcon]=\"'heroicons_solid:information-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'success'\"\n                [svgIcon]=\"'heroicons_solid:check-circle'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'warning'\"\n                [svgIcon]=\"'heroicons_solid:exclamation'\"></mat-icon>\n\n            <mat-icon\n                *ngIf=\"type === 'error'\"\n                [svgIcon]=\"'heroicons_solid:x-circle'\"></mat-icon>\n\n        </div>\n\n    </div>\n\n    <!-- Content -->\n    <div class=\"fuse-alert-content\">\n\n        <div class=\"fuse-alert-title\">\n            <ng-content select=\"[fuseAlertTitle]\"></ng-content>\n        </div>\n\n        <div class=\"fuse-alert-message\">\n            <ng-content></ng-content>\n        </div>\n\n    </div>\n\n    <!-- Dismiss button -->\n    <button\n        class=\"fuse-alert-dismiss-button\"\n        mat-icon-button\n        (click)=\"dismiss()\">\n        <mat-icon [svgIcon]=\"'heroicons_solid:x'\"></mat-icon>\n    </button>\n\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { filter, Subject, takeUntil } from 'rxjs';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseAlertAppearance, FuseAlertType } from '@fuse/components/alert/alert.types';\nimport { FuseAlertService } from '@fuse/components/alert/alert.service';\nimport { FuseUtilsService } from '@fuse/services/utils/utils.service';\n\n@Component({\n    selector       : 'fuse-alert',\n    templateUrl    : './alert.component.html',\n    styleUrls      : ['./alert.component.scss'],\n    encapsulation  : ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations     : fuseAnimations,\n    exportAs       : 'fuseAlert'\n})\nexport class FuseAlertComponent implements OnChanges, OnInit, OnDestroy\n{\n    /* eslint-disable @typescript-eslint/naming-convention */\n    static ngAcceptInputType_dismissible: BooleanInput;\n    static ngAcceptInputType_dismissed: BooleanInput;\n    static ngAcceptInputType_showIcon: BooleanInput;\n    /* eslint-enable @typescript-eslint/naming-convention */\n\n    @Input() appearance: FuseAlertAppearance = 'soft';\n    @Input() dismissed: boolean = false;\n    @Input() dismissible: boolean = false;\n    @Input() name: string = this._fuseUtilsService.randomId();\n    @Input() showIcon: boolean = true;\n    @Input() type: FuseAlertType = 'primary';\n    @Output() readonly dismissedChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private _unsubscribeAll: Subject<any> = new Subject<any>();\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _fuseAlertService: FuseAlertService,\n        private _fuseUtilsService: FuseUtilsService\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Host binding for component classes\n     */\n    @HostBinding('class') get classList(): any\n    {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        return {\n            'fuse-alert-appearance-border' : this.appearance === 'border',\n            'fuse-alert-appearance-fill'   : this.appearance === 'fill',\n            'fuse-alert-appearance-outline': this.appearance === 'outline',\n            'fuse-alert-appearance-soft'   : this.appearance === 'soft',\n            'fuse-alert-dismissed'         : this.dismissed,\n            'fuse-alert-dismissible'       : this.dismissible,\n            'fuse-alert-show-icon'         : this.showIcon,\n            'fuse-alert-type-primary'      : this.type === 'primary',\n            'fuse-alert-type-accent'       : this.type === 'accent',\n            'fuse-alert-type-warn'         : this.type === 'warn',\n            'fuse-alert-type-basic'        : this.type === 'basic',\n            'fuse-alert-type-info'         : this.type === 'info',\n            'fuse-alert-type-success'      : this.type === 'success',\n            'fuse-alert-type-warning'      : this.type === 'warning',\n            'fuse-alert-type-error'        : this.type === 'error'\n        };\n        /* eslint-enable @typescript-eslint/naming-convention */\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     *\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges): void\n    {\n        // Dismissed\n        if ( 'dismissed' in changes )\n        {\n            // Coerce the value to a boolean\n            this.dismissed = coerceBooleanProperty(changes.dismissed.currentValue);\n\n            // Dismiss/show the alert\n            this._toggleDismiss(this.dismissed);\n        }\n\n        // Dismissible\n        if ( 'dismissible' in changes )\n        {\n            // Coerce the value to a boolean\n            this.dismissible = coerceBooleanProperty(changes.dismissible.currentValue);\n        }\n\n        // Show icon\n        if ( 'showIcon' in changes )\n        {\n            // Coerce the value to a boolean\n            this.showIcon = coerceBooleanProperty(changes.showIcon.currentValue);\n        }\n    }\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Subscribe to the dismiss calls\n        this._fuseAlertService.onDismiss\n            .pipe(\n                filter(name => this.name === name),\n                takeUntil(this._unsubscribeAll)\n            )\n            .subscribe(() => {\n\n                // Dismiss the alert\n                this.dismiss();\n            });\n\n        // Subscribe to the show calls\n        this._fuseAlertService.onShow\n            .pipe(\n                filter(name => this.name === name),\n                takeUntil(this._unsubscribeAll)\n            )\n            .subscribe(() => {\n\n                // Show the alert\n                this.show();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next(null);\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Dismiss the alert\n     */\n    dismiss(): void\n    {\n        // Return if the alert is already dismissed\n        if ( this.dismissed )\n        {\n            return;\n        }\n\n        // Dismiss the alert\n        this._toggleDismiss(true);\n    }\n\n    /**\n     * Show the dismissed alert\n     */\n    show(): void\n    {\n        // Return if the alert is already showing\n        if ( !this.dismissed )\n        {\n            return;\n        }\n\n        // Show the alert\n        this._toggleDismiss(false);\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Dismiss/show the alert\n     *\n     * @param dismissed\n     * @private\n     */\n    private _toggleDismiss(dismissed: boolean): void\n    {\n        // Return if the alert is not dismissible\n        if ( !this.dismissible )\n        {\n            return;\n        }\n\n        // Set the dismissed\n        this.dismissed = dismissed;\n\n        // Execute the observable\n        this.dismissedChanged.next(this.dismissed);\n\n        // Notify the change detector\n        this._changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FuseAlertComponent } from '@fuse/components/alert/alert.component';\n\n@NgModule({\n    declarations: [\n        FuseAlertComponent\n    ],\n    imports     : [\n        CommonModule,\n        MatButtonModule,\n        MatIconModule\n    ],\n    exports     : [\n        FuseAlertComponent\n    ]\n})\nexport class FuseAlertModule\n{\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FuseCardComponent } from '@fuse/components/card/card.component';\n\n@NgModule({\n    declarations: [\n        FuseCardComponent\n    ],\n    imports     : [\n        CommonModule\n    ],\n    exports     : [\n        FuseCardComponent\n    ]\n})\nexport class FuseCardModule\n{\n}\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = (svg.currentScale ?? 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"], dependencies: [{ kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }]; }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [MatCommonModule, CommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import `MatProgressSpinner` instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"x_google_ignoreList":[5]}